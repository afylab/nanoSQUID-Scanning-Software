This folder provides a template for creating new widgets that are compatible with the GUI. This is 
not a guide on how to code in python, pyqt4, or how to use QtDesigner. 

Step 1: Folder Creation
Create a new folder in the Scanner Gui folder with a logical name. All of the python and GUi files
will be placed in this folder. 

Step 2: Create UI
Starting from the Template.ui file in this folder, create the desired user interface
using QtDesigner. Save the file in the new folder. 

Step 3: Code Python
Starting from the Template.py file in this folder, code what you need. The following changes need
to be made for your module to integrate properly.

    3a: Modify the global path variable at the top of the program to include your folder name
	instead of "Module Template".
    3b: Make sure the moveDefault method places the module in a location that is agreeable with
	the rest of the GUI. 
    3c: Labrad connections. Initialize everything, put everything in connect function. Make sure 
	that you're using the right names from the dictionary. 
    3d: Additional UI initialization. Many UI elements, such as pyqtgraph plots, are not easily
	initialized in QtDesigner. Anything not initialized in the ui file should be initialized
	in the specified method. 
    3e: It is also suggested to populate the lock and unlock interface methods. By default, these
	are used to lock the interface until the appropriate LabRAD servers are connected for 
	proper use of the module. 

Step 4: Modify Server List
Open the requiredServers.ui file in QtDesigner and edit it to include all the servers required by
your new module. 

Step 5: Modifications to nSOTScanner.py 
Everything is run through the file nSOTScanner.py, so we next need to connect the module
to this main python file. 

    5a: Add window creation
    5b: Add to close event / hide all windows
    5c: Add to import list
    5d: Add to path
    5e: connect drop down menu to open window
    5f: add to labrad distribution list / disconnect list
    5g: (Optional) Add to layout button

Step 6: DataVault Connection

    6a: Add blank to the dictionary with appropriate name
    6b: If your module requires a connection to datavault, it needs to have a new data vault connection 
created for it in the LabRAD Connect Module. In the connectDataVault method, create another 
asynchronous connection and its connection to data vault, and pass it with an appropriate name
into the dictionary. 


General naming conventions:
All GUI items should have their type in their name. For example, a pushButton should be called push_XXX.
A comboBox should be comboBox_XXX. Etc... This makes the code infinitely more readable for future users. 



